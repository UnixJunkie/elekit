#!/bin/bash

# EleKit SMLPRc: Small Molecule Ligand Protein Receptor complementarity version

# Copyright (C) 2012 Zhang Initiative Research Unit,
# Advance Science Institute, RIKEN
# 2-1 Hirosawa, Wako, Saitama 351-0198, Japan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

#set -x
set -u
#set -e

# USER CONFIG START ##################################################
HERE=/home/berenger/src/elekit/src
# USER CONFIG END ####################################################

function usage() {
    echo "usage: "$0" PROT_REC PROT_LIG MOL_LIG AREC ALIG NP [-n] [-part]"
    #              0  1        2        3       4    5    6  7
    echo "  PROT_REC, PROT_LIG: don't put the .pdb extension in filenames"
    echo "  MOL_LIG: don't put the .mol2 extension in filename"
    echo "  AREC, ALIG: distance to consider around ligand and receptor (A)"
    echo "  NP: number of processors to use during the APBS run"
    echo "  -n: dry run, don't do anything, just show commands"
    echo "  -part: skip the protein-protein complexe calculation"
    echo "         (you must have done it previously)"
    exit 1
}

DEBUG=""
MODE="part"

# if -part option not found on CLI, use full mode
echo "$@" | grep -q '\-part' || MODE="full"

if (( $# < 6 )) || (( $# > 8 )) ; then
    usage
elif (( $# == 7 )) || (( $# == 8 )) ; then
    if [ "$7" == "-n" ] ; then
        DEBUG=echo
    elif [ "$7" != "-part" ] ; then
        usage
    fi
fi

PROT_REC=$1
PROT_LIG=$2
MOL_LIG=$3
AREC=$4
ALIG=$5
NP=$6

# where are the executables you want to use
export APBS=$HERE/../ext/apbs-1.3-src/bin/apbs
export PDB2PQR=$HERE/../ext/pdb2pqr-1.8-src/pdb2pqr.py
ES_TOOL_PP=$HERE/es_tool_pp.native
ES_TOOL_SP=$HERE/es_tool_sp.native
ES_TOOL_CORR=$HERE/es_tool_corr.native

PROT_REC_PDB=$PROT_REC".pdb"
PROT_LIG_PDB=$PROT_LIG".pdb"
PROT_LIG_DX=$PROT_LIG".dx"
DOT_IN=$PROT_LIG".in"
MOL_LIG_MOL2=$MOL_LIG".mol2"
MOL_LIG_FILES=$MOL_LIG".files"
MOL_LIG_DX=$MOL_LIG".dx"
MOL_LIG_LOG=$MOL_LIG".log"
PROT_REC_MASK=$PROT_REC"_"$AREC".mask.gz"
PROT_LIG_MASK=$PROT_LIG"_"$ALIG".mask.gz"
MOL_LIG_MASK=$MOL_LIG"_"$ALIG".mask.gz"

# run apbs for the ligand protein
if [ "$MODE" == "full" ] ; then
    export OMP_NUM_THREADS=$NP # APBS parallelization via OpenMP
    $DEBUG \
    $ES_TOOL_PP -p1 $PROT_REC_PDB -p2 $PROT_LIG_PDB \
                -arec $AREC -alig $ALIG
fi
# run apbs for each ligand molecule
export OMP_NUM_THREADS=1 # no more parallelization by OpenMP but by Parmap
$DEBUG \
$ES_TOOL_SP -p1 $PROT_REC_PDB -p2 $MOL_LIG_MOL2 -in $DOT_IN -alig $ALIG \
            -out $MOL_LIG_FILES -np $NP
# correlate the previously obtained dx files
$DEBUG \
$ES_TOOL_CORR -d1 $PROT_LIG_DX -m1 $PROT_LIG_MASK -m2 $PROT_REC_MASK \
              -f $MOL_LIG_FILES -np $NP
